scope({c0_Person:3, c0_age:3, c0_divorced:3, c0_maritalStatus:3, c0_married:3, c0_neverMarried:3, c0_spouse:3});
defaultScope(1);
intRange(-8, 7);

c0_Person = Abstract("c0_Person");
c0_age = c0_Person.addChild("c0_age").withCard(1, 1);
c0_maritalStatus = c0_Person.addChild("c0_maritalStatus").withCard(1, 1).withGroupCard(1, 1);
c0_neverMarried = c0_maritalStatus.addChild("c0_neverMarried").withCard(0, 1);
c0_married = c0_maritalStatus.addChild("c0_married").withCard(0, 1);
c0_spouse = c0_married.addChild("c0_spouse").withCard(1, 1);
c0_divorced = c0_maritalStatus.addChild("c0_divorced").withCard(0, 1);
c0_Alice = Clafer("c0_Alice").withCard(1, 1).extending(c0_Person);
c0_Bob = Clafer("c0_Bob").withCard(1, 1).extending(c0_Person);
c0_Carol = Clafer("c0_Carol").withCard(1, 1).extending(c0_Person);
c0_age.refToUnique(Int);
c0_spouse.refToUnique(c0_Person);
c0_age.addConstraint(greaterThanEqual(joinRef($this()), constant(0)));
c0_married.addConstraint(greaterThanEqual(joinRef(join(joinParent(joinParent($this())), c0_age)), constant(18)));
c0_married.addConstraint(notEqual(joinRef(join($this(), c0_spouse)), joinParent(joinParent($this()))));
c0_married.addConstraint(equal(joinRef(join(join(join(joinRef(join($this(), c0_spouse)), c0_maritalStatus), c0_married), c0_spouse)), joinParent(joinParent($this()))));
c0_divorced.addConstraint(greaterThanEqual(joinRef(join(joinParent(joinParent($this())), c0_age)), constant(18)));
c0_Alice.addConstraint(some(join(join($this(), c0_maritalStatus), c0_married)));
c0_Carol.addConstraint(equal(joinRef(join($this(), c0_age)), constant(5)));
